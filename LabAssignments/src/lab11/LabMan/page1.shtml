


<!DOCTYPE html> 
<html lang="en"> 
  <head> 
    <meta charset="utf-8" /> 

    <title>CMSC 202 - Fall 2012 - Lab 12</title> 

    <link rel="shortcut icon" href="/courses/undergraduate/202/fall12/favicon.ico" />
    <link rel="stylesheet" href="/courses/undergraduate/202/fall12/css/style.css" />
    <link rel="stylesheet" href="/courses/undergraduate/202/fall12/css/print.css" media="print" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"></script>
    <script src="/courses/undergraduate/202/fall12/js/jquery.cookie.js"></script>
  </head> 
  <body> 
    <div id="wrapper"> 
      <div id="header">
	<h1><a href="/courses/undergraduate/202/fall12/">CMSC 202 &mdash; Fall 2012</a></h1>
	<div id="headerimg" class="donotprint"></div>
	<div id="nav" class="donotprint">
	  <ul>
	    <li><a href="/courses/undergraduate/202/fall12/">Home</a></li>
	    <li><a href="/courses/undergraduate/202/fall12/schedule/">Schedule/Lecture Notes</a></li>
<!--	    <li><a href="/courses/undergraduate/202/fall12/lectures/">Lectures</a></li> -->
	    <li><a href="/courses/undergraduate/202/fall12/labs/">Labs</a></li>
	    <li><a href="/courses/undergraduate/202/fall12/projects/">Projects</a></li>
	    <li><a href="/courses/undergraduate/202/fall12/exams/">Exams</a></li>
	    <li><a href="/courses/undergraduate/202/fall12/resources/">Resources</a></li>
	    <li><a href="/courses/undergraduate/202/fall12/faq/">FAQ</a></li>
	    <li><a href="/courses/undergraduate/202/fall12/staff/">Staff</a></li>
	    <li><a href="/courses/undergraduate/202/fall12/syllabus/">Syllabus</a></li>
	  </ul>
	</div>
      </div>
      <div id="content">

<!-- END HEADER -->




<h1>Description</h1>
<div class="sidebar">
<p>
  <a href="./">Overview</a>
</p>
<ol>
  <li>
    <a href="page1.shtml">Description</a>
  </li>
  <li>
    <a href="page2.shtml">Source Code Structure</a>
  </li>
  <li>
    <a href="page3.shtml">Media Interface</a>
  </li>
  <li>
    <a href="page4.shtml">CD Class</a>
  </li>
  <li>
    <a href="page5.shtml">Book Class</a>
  </li>
  <li>
    <a href="page6.shtml">CatalogItem Class</a>
  </li>
  <li>
    <a href="page7.shtml">CatalogDriver Class</a>
  </li>
  <li>
    <a href="page8.shtml">Testing</a>
  </li>
</ol>
      
</div>



<p>
  <b>Generics</b> allow us to parameterize interfaces, classes, and methods in
  Java.  Typically, generics are used in conjunction with <b>containers</b>. A
  container is a class used to hold objects in some meaningful way (e.g. an
  ordered list, a set).
</p>
<p>
  Here is an example of a generic class:
</p>

<pre class="brush: java">
class SomeClass&lt;T&gt;
{
	private T someInstanceVariable;

	public SomeClass( T someVariable )
	{
		someInstanceVariable = someVariable;
	}

	public T getSomeInstanceVariable()
	{
		return someInstanceVariable;
	}
}
</pre>

<p>
  When creating a generic object, you may now specify the actual type of T:
</p>
<pre class="brush: java">
SomeClass&lt;String&gt; someObject = new SomeClass&lt;String&gt;( "A String" );
</pre>
<p>
  Now every T in the class definition will be the specified parameter type.
  In the above example, T would be String.  Typically, we would like to be
  able to do things with a generic type, but in the above example, we don't
  know anything about T, except that it will be an Object.  So, we can call
  Object methods, like toString and equals. But what if we want to be more
  specific about the actual type of T?
</p>
<p>
  We may "bound" a generic type to gurantee some associated behavior
  (available methods):
</p>

<pre class="brush: java">
class SomeClass&lt;T extends Comparable&lt;T&gt;&gt;
{
	private T someInstanceVariable;

	public SomeClass( T someVariable )
	{
		someInstanceVariable = someVariable;
	}

	public T getSomeInstanceVariable()
	{
		return someInstanceVariable;
	}
	
	public boolean isLessThan( SomeClass&lt;T&gt; someArgument )
	{
		if( someInstanceVariable.compareTo( someArgument.getSomeInstanceVariable() ) < 0 )
			return true;
		return false;
	}
	 public static void main(String[] args) {
		SomeClass<String> s1=new SomeClass<String>("A");
		SomeClass<String> s2=new SomeClass<String>("B");
		System.out.println("s1 less than s2?? "+s1.isLessThan(s2));
		
		SomeClass<Integer> i1=new SomeClass<Integer>(200);
		SomeClass<Integer> i2=new SomeClass<Integer>(120);
		System.out.println("i1 less than i2?? "+i1.isLessThan(i2));
	}
}
</pre>

<p>
  Now we have bounded type T to be a Comparable.  Now in the isLessThan
  method, it is safe to assume that T has a compareTo method.  Notice that
  even though Comparable is an interface, we use the "extends" keyword. "extends"
  in generics can also mean that a generic class type will implement a particular interface
  it is "extending". Also, the power of generics can be seen in the simple main method above,
  where we used a single class 'SomeClass' to compare both integers and strings without
  differentiating between the data types like we would have done otherwise by overloading the
  'isLessThan' method to treat strings and integers separately.
</p>
<p>
  We may also define generic interfaces and generic methods.  Generic
  interfaces follow the same pattern as the above class example, but generic
  methods look a little different:
</p>

<pre class="brush: java">
public &lt;U extends Comparable&lt;U&gt;&gt; void someMethod( SomeClass&lt;T&gt; someArgument)
// ...
</pre>

<p>
  You may also specify more than one generic type or bound a type by more than
  one interface:
</p>
Like this class takes two generic parameters without any constraint on any of them:
<pre class="brush: java">
class SomeClass&lt;T , S&gt;
</pre>
However this class takes two generic parameters with a constraint 
that the first class must implement the Comparable interface:

<pre class="brush: java">
class SomeClass&lt;T extends Comparable&lt;T&gt;, S&gt;
</pre>
Notice the use of '&' in the class declaration below. The class which may look like
taking two arguments actually takes in just one, with a constraint that the generic 
parameter class passed in must implement two interfaces: 'Comparable' and 'SomeOtherInterface':
<pre class="brush: java">
class SomeClass&lt;T extends Comparable&lt;T&gt; & SomeInterface&lt;T&gt;&gt;
</pre>

<p>
  This lab will try to create a list of catalog items and sort it. The item may be a 'Book' or a 'CD'.
  Both 'Book' and 'CD' will therefore be classes implementing an interface called 'Media'.
  Since the catalog item can be a 'Book' or a 'CD', we will make a generic class called 'CatalogItem'
  which can take one of these two types.
</p>
<p>
  The details of the lab are as follows:
</p>
<ul>
  <li>
    Each Book and a CD has its own unique ID.The difference between the CD class 
    and the Book class will be in the data types for the ID, since a CD usually has
    an integer code as its ID and a book uses an alphanumeric string code (ISBN).
    These ID's will be the basis of the sorting which this lab aims to accomplish.
  </li>
  <li>
    As CatalogItem is a generic class with a single parameter, and we can create a 
    CatalogITem of type book or a CD.
  </li>
  <li>
    A catalog will be represented as an ArrayList of CatalogItems. (Typically,
    we would make a special Catalog class. But for demonstration purposes,
    this has been simplified.)
  </li>
  <li>
    CatalogItem will be Comparable itself, as we wish to call 'sort' on a list of
    CatalogItems, which in turn calls the compareTo() method to do the sorting.
  </li>
  <li>
    We will print the catalogs by utilizing List's toString to verify that
    the contents of our catalogs have indeed been sorted.
  </li>
</ul>   


    
<div class="labnav">
  <div>
    <a href="./" class="button">&laquo; Previous</a>
  </div>
  <a href="./page2.shtml" class="button">Next &raquo;</a>
</div>




<!-- BEGIN FOOTER -->

      </div>
      <div id="footer" class="donotprint">
        <div>	
          <a href="/courses/undergraduate/202/fall12">CMSC 202 &mdash; Fall 2012</a>
        </div>
        <a href="/courses/undergraduate/202/fall12/../">CMSC 202</a> |
        <a href="http://www.csee.umbc.edu/">CSEE</a> |
        <a href="http://www.umbc.edu/">UMBC</a>
      </div>
    </div> 
    <link rel="stylesheet" href="/courses/undergraduate/202/fall12/js/syntaxhighlighter_3.0.83/styles/shCore.css"/>
    <link rel="stylesheet" href="/courses/undergraduate/202/fall12/js/syntaxhighlighter_3.0.83/styles/shCoreEclipseModified.css"/>
    <script src="/courses/undergraduate/202/fall12/js/syntaxhighlighter_3.0.83/scripts/shCore.js"></script>
    <script src="/courses/undergraduate/202/fall12/js/syntaxhighlighter_3.0.83/scripts/shBrushJava.js"></script>
    <script src="/courses/undergraduate/202/fall12/js/syntaxhighlighter_3.0.83/scripts/shBrushPlain.js"></script>
    <script>

      // source code highlighting
      $(function() {
        SyntaxHighlighter.defaults['toolbar'] = false;
        SyntaxHighlighter.all();
      });

      // Google Analytics
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-20998370-1']);
      _gaq.push(['_trackPageview']);
     (function() {
       var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
       ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
       var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
     })();

    </script>
  </body> 
</html> 

